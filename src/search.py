# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import requests
from bs4 import BeautifulSoup

class Ui_SearchWindow(object):

    #==================================Designer codes=====================================
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(450, 550)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../img/logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: #E6E6E6;\n"
"border: none; border-radius: 15px;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(380, 3, 70, 40))
        self.frame.setStyleSheet("background: none;\n"
"border: none;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.btn_close = QtWidgets.QPushButton(self.frame)
        self.btn_close.setGeometry(QtCore.QRect(40, 10, 20, 20))
        self.btn_close.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_close.setStyleSheet("background-color: #b31414;\n"
"border-radius: 10px;")
        self.btn_close.setText("")
        self.btn_close.setObjectName("btn_close")
        self.btn_min = QtWidgets.QPushButton(self.frame)
        self.btn_min.setGeometry(QtCore.QRect(10, 10, 20, 20))
        self.btn_min.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_min.setStyleSheet("background-color: #c4bb14;\n"
"border-radius: 10px;")
        self.btn_min.setText("")
        self.btn_min.setObjectName("btn_min")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 10, 380, 40))
        font = QtGui.QFont()
        font.setFamily("BNazanin")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("background: none;\n"
"color: #010107;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.search = QtWidgets.QLineEdit(self.centralwidget)
        self.search.setGeometry(QtCore.QRect(53, 60, 381, 35))
        font = QtGui.QFont()
        font.setFamily("BNazanin")
        font.setPointSize(11)
        self.search.setFont(font)
        self.search.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.search.setStyleSheet("background-color: #B7D5D3;\n"
"border-radius: 5px;\n"
"color: #010107;")
        self.search.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.search.setObjectName("search")
        self.search_btn = QtWidgets.QPushButton(self.centralwidget)
        self.search_btn.setGeometry(QtCore.QRect(10, 60, 35, 35))
        font = QtGui.QFont()
        font.setFamily("BNazanin")
        font.setPointSize(9)
        self.search_btn.setFont(font)
        self.search_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.search_btn.setStyleSheet("background-color: #559995;\n"
"border-radius: 5px;\n"
"color: #010107;")
        self.search_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("/home/matin/Desktop/Digikala-Search/img/search-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search_btn.setIcon(icon1)
        self.search_btn.setIconSize(QtCore.QSize(20, 20))
        self.search_btn.setObjectName("search_btn")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(10, 105, 432, 53))
        self.frame_3.setStyleSheet("background: none; border-radius: 0px;")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.most_expenvsive = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.most_expenvsive.setFont(font)
        self.most_expenvsive.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.most_expenvsive.setStyleSheet("background-color: #B7D5D3;\n"
"color: #010107;\n"
"border-radius: 5px;\n"
"padding: 8px;")
        self.most_expenvsive.setObjectName("most_expenvsive")
        self.horizontalLayout.addWidget(self.most_expenvsive)
        self.most_cheap = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.most_cheap.setFont(font)
        self.most_cheap.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.most_cheap.setStyleSheet("background-color: #B7D5D3;\n"
"color: #010107;\n"
"border-radius: 5px;\n"
"padding: 8px;")
        self.most_cheap.setObjectName("most_cheap")
        self.horizontalLayout.addWidget(self.most_cheap)
        self.most_new = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.most_new.setFont(font)
        self.most_new.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.most_new.setStyleSheet("background-color: #B7D5D3;\n"
"color: #010107;\n"
"border-radius: 5px;\n"
"padding: 8px;")
        self.most_new.setObjectName("most_new")
        self.horizontalLayout.addWidget(self.most_new)
        self.most_related = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.most_related.setFont(font)
        self.most_related.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.most_related.setStyleSheet("background-color: #559995;\n"
"color: #010107;\n"
"border-radius: 5px;\n"
"padding: 8px;")
        self.most_related.setObjectName("most_related")
        self.horizontalLayout.addWidget(self.most_related)
        self.most_related.raise_()
        self.most_new.raise_()
        self.most_expenvsive.raise_()
        self.most_cheap.raise_()
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 170, 451, 381))
        self.frame_2.setStyleSheet("background-color: #E6E6E6;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_2)
        self.scrollArea.setStyleSheet("QScrollBar {\n"
"    background: #c2c2c2;\n"
"}")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 433, 363))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.btn_close.clicked.connect(MainWindow.close)
        self.btn_min.clicked.connect(MainWindow.showMinimized)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        #=======================================My codes=========================
        self.search.setFocus(True)
        self.search_btn.clicked.connect(self.searching)
        self.search.returnPressed.connect(self.searching)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Digikala Search"))
        self.label.setText(_translate("MainWindow", "جستوجوگر دیجیکالا"))
        self.search.setPlaceholderText(_translate("MainWindow", "جستوجو در دیجیکالا..."))
        self.most_expenvsive.setText(_translate("MainWindow", "گران ترین"))
        self.most_cheap.setText(_translate("MainWindow", "ارزان ترین"))
        self.most_new.setText(_translate("MainWindow", "جدیدترین"))
        self.most_related.setText(_translate("MainWindow", "مرتبط ترین"))


    #====================================My Functions==============================
    def searching(self):
        url = 'https://www.digikala.com/search/?q=%s' % self.search.text()
        self.search.setText('')
        req = requests.get(url)
        
        soup = BeautifulSoup(req.text , 'html.parser')


        # Getting titles -> returns "titles" list
        titles_container = soup.find_all('div' , attrs={'class':'c-product-box__content--row'})
        titles_container = list(titles_container)
        titles = []
        for tit in titles_container:
            titles_soup = BeautifulSoup(str(tit) , 'html.parser')
            title = (titles_soup.find('a' , attrs={'class':'js-product-url'}))
            title = (str(title.text)).strip()
            titles.append(title)
        

        # Getting images urls -> returns "images_urls" list
        images_container = soup.find_all('a' , attrs={'class':'c-product-box__img c-promotion-box__image js-url js-product-item js-product-url'})
        images_container = list(images_container)
        images_urls = []
        for image in images_container:
            image_soup = BeautifulSoup(str(image) , 'html.parser')
            image = image_soup.find('img')
            image = image['src']
            images_urls.append(image)


        # Getting prices -> returns prices
        price_container = soup.find_all('div' , attrs={'class':'c-price__value c-price__value--plp js-plp-product-card-price'})
        price_container = list(price_container)

        prices = []

        for price in price_container:
            price_soup = BeautifulSoup(str(price) , 'html.parser')
            the_price = price_soup.find('div' , attrs={'class':'c-price__value-wrapper'})

            this = (str(the_price.text)).strip()
            this = this.replace(' ' , '')
            this = this.replace('\n' , ' ')

            prices.append(this)



        counter = -1
        for this in titles:
            counter += 1
            print(this , prices[counter] , images_urls[counter])